#!/bin/bash

set -exo

if [ -z "${CFSSL_CA_HOST}" ]; then
  >&2 echo "CFSSL_CA_HOST is not set"
  exit 1
fi

if [ ! -f "ca.pem" ];then
  cat <<EOF > ca.json
{
  "hosts": [
  ],
  "key": {
    "algo": "${CFSSL_CA_ALGO}",
    "size": ${CFSSL_CA_KEY_SIZE}
  },
  "names": [{
    "O": "${CFSSL_CA_ORGANIZATION}",
    "OU": "${CFSSL_CA_ORGANIZATIONAL_UNIT}"
  }],
  "CN": "${CFSSL_CA_COMMON_NAME}"
}
EOF

  cfssl genkey -initca ca.json | cfssljson -bare ca
fi

if [ -n "${CFSSL_CA_AUTH_KEY}"]; then
  CFSSL_CA_AUTH_KEY=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 32 | head -n 1)
  echo "Generated auth key: ${CFSSL_CA_AUTH_KEY}"
fi

if [ ! -f ${CFSSL_CA_POLICY_FILE} ]; then
  cat <<EOF > ${CFSSL_CA_POLICY_FILE}
{
  "signing": {
    "default": {
      "auth_key": "auth_key",
      "expiry": "8760h",
      "usages": [
        "signing",
        "key encipherment",
        "server auth"
      ]
    },
    "profiles": {
      "server": {
        "expiry": "8760h",
        "usages": [
          "signing",
          "key encipherment",
          "server auth"
        ]
      },
      "client": {
        "expiry": "8760h",
        "usages": [
          "signing",
          "key encipherment",
          "client auth"
        ]
      },
      "client-server": {
        "expiry": "8760h",
        "usages": [
          "signing",
          "key encipherment",
          "server auth",
          "client auth"
        ]
      }
    }
  },
  "auth_keys": {
    "auth_key": {
      "key": "${CFSSL_CA_AUTH_KEY}",
      "type": "standard"
    }
  }
}
EOF
fi

if [ ! -f "server.pem" ];then
  cat <<EOF > server.json
{
  "hosts": [
    $(echo "\"${CFSSL_CA_HOST//,/\",\"}\""),"localhost","127.0.0.1"
  ],
  "key": {
    "algo": "${CFSSL_CA_ALGO}",
    "size": ${CFSSL_CA_KEY_SIZE}
  },
  "names": [{
    "O": "${CFSSL_CA_ORGANIZATION}",
    "OU": "${CFSSL_CA_ORGANIZATIONAL_UNIT}"
  }],
  "CN": "${CFSSL_CA_HOST%%,*}"
}
EOF
  cfssl gencert -ca ca.pem -ca-key ca-key.pem -hostname "${CFSSL_CA_HOST}" server.json | cfssljson -bare server
  cat server.pem ca.pem > server-bundle.pem
fi

if [ ! -f "db-config.json" ];then
  echo "Initialize SQLite DB for certdb"
  echo '{"driver":"sqlite3","data_source":"certstore_production.db"}' > db-config.json
  goose -env production -path $GOPATH/src/github.com/cloudflare/cfssl/certdb/sqlite up
fi

cfssl serve -address=localhost \
            -port=8888 \
            -config=${CFSSL_CA_POLICY_FILE} \
            -ca-bundle=/etc/cfssl/ca-bundle.crt \
            -int-bundle=/etc/cfssl/int-bundle.crt \
            -int-dir=/etc/cfssl/data/intermediates \
            -db-config=db-config.json &

echo "nginx listening for connections on port: 443"
exec nginx -c /etc/nginx/nginx.conf

# vim: set ft=sh:
